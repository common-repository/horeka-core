
function dataService() {
    var self = this;

	this.call = function (url, data, method, headers, type = 'json') {
        if (method == undefined) {
            method = 'POST';
        }

		if (type === 'json') {

			if (method == 'GET') {

				url = (url + (data ? data : ''));

				return jQuery.ajax({
					url: _apiUrl + url,
					headers: headers,
					type: method,
					data: JSON.stringify(data),
					contentType: 'application/json; charset=utf-8',
					dataType: 'json',
				});
			}
			else {
				return jQuery.ajax({
					url: _apiUrl + url,
					headers: headers,
					type: method,
					data: JSON.stringify(data),
					contentType: 'application/json; charset=utf-8',
					dataType: 'json',

				});
			}
		}
		else {
			if(method == 'GET') {

				url = (url + (data ? data : ''));

				return jQuery.ajax({
					url: _apiUrl + url,
					headers: headers,
					type: method,
					data: (data),
				});
			}
			else {
				return jQuery.ajax({
					url: _apiUrl + url,
					headers: headers,
					type: method,
					data:(data),

				});
			}
		}
    }

	this.callFormData = function (url, data, method, headers) {
        if (method == undefined) {
            method = 'POST';
		}

        return jQuery.ajax({
			url: _apiUrl + url,
			headers: headers,
            type: method,
            contentType: false,
            processData: false,
			data: data,
        });
    }

	this.apiCallDefferer = function (url, data, method, headers, type = 'json') {

        var def = jQuery.Deferred();
		self.call(url, data, method, headers, type).done(function (responseData) {
            def.resolve(responseData);
        }).fail(function (responseData) {
            def.reject(responseData);
        });

        return def.promise();
	}

	this.apiCallDeffererWithAuth = function (url, data, method, headers, type = 'json') {

		headers = {
			"Authorization": 'Bearer ' + authenticateProfile().getAccessToken()
		}; 

		var def = jQuery.Deferred();
		self.call(url, data, method, headers, type).done(function (responseData) {
			def.resolve(responseData);

		}).fail(function (responseData) {

			if (responseData.status === 401) {
				authenticateService().refreshToken(authenticateProfile().getRefreshToken()).done(function (responseData) {

					authenticateProfile().setToken(responseData.access_token, responseData.refresh_token);
					headers = {
						"Authorization": 'Bearer ' + authenticateProfile().getAccessToken()
					};
					self.call(url, data, method, headers, type).done(function (responseData) {
						def.resolve(responseData);
					}).fail(function (responseData) {
						def.reject(responseData);
					});
				}).fail(function (responseData) {
					def.reject(responseData);
				});
			}
			else {
				def.reject(responseData);
			}
		});

		return def.promise();
	}

	this.apiCallDeffererFormData = function (url, data, method, headers) {
        var formData = new FormData();

        var __RequestVerificationToken = $("input[name=__RequestVerificationToken]").val();
        if (__RequestVerificationToken && __RequestVerificationToken !== null) {
            formData.append('__RequestVerificationToken', __RequestVerificationToken);
        }

        if (data.fields) {
            jQuery.each(data.fields, function (key, value) {
                formData.append(key, value);
            });
        }

        if (data.fileUploads) {
            jQuery.each(data.fileUploads, function (key, value) {
                jQuery.each(value, function (i, item) {
                    formData.append(key, item.file);
                });
            });
        }
        var def = jQuery.Deferred();
		self.callFormData(url, formData, method, headers).done(function (responseData) {
            def.resolve(responseData);
        }).fail(function (responseData) {
            def.reject(responseData);
        });

        return def.promise();
	}

	this.apiCallDeffererFormDataWithAuth = function (url, data, method, headers) {
		var formData = new FormData();
		headers = {
			"Authorization": 'Bearer ' + authenticateProfile().getAccessToken()
		}; 

		var __RequestVerificationToken = $("input[name=__RequestVerificationToken]").val();
		if (__RequestVerificationToken && __RequestVerificationToken !== null) {
			formData.append('__RequestVerificationToken', __RequestVerificationToken);
		}

		if (data.fields) {
			jQuery.each(data.fields, function (key, value) {
				formData.append(key, value);
			});
		}

		if (data.fileUploads) {
			jQuery.each(data.fileUploads, function (key, value) {

				formData.append(key, value);
				//jQuery.each(value, function (i, item) {
				//	formData.append(key, item.file);
				//});
			});
		}
		var def = jQuery.Deferred();
		self.callFormData(url, formData, method, headers).done(function (responseData) {
			def.resolve(responseData);
		}).fail(function (responseData) {
			if (responseData.status === 401) {
				authenticateService.refreshToken(authenticateProfile().getRefreshToken()).done(function (responseData) {

					authenticateProfile().setToken(responseData.access_token, responseData.refresh_token);
					headers = {
						"Authorization": 'Bearer ' + authenticateProfile().getAccessToken()
					}; 

					self.callFormData(url, formData, method, headers).done(function (responseData) {

						def.resolve(responseData);
					}).fail(function (responseData) {
						def.reject(responseData);
					});
				}).fail(function (responseData) {
					def.reject(responseData);
				});
			} else {
				def.reject(responseData);
			}
		});

		return def.promise();
	}

    return {
		apiCall: this.apiCallDefferer,
		apiCallWithAuth: this.apiCallDeffererWithAuth,
		apiCallFormData: this.apiCallDeffererFormData,
		apiCallFormDataWithAuth: this.apiCallDeffererFormDataWithAuth
    }
}

function productService() {
	var self = this;

	this.getAllCategories = function (data) {

		var headers = {
			'ApiKey': _apiKey
		};

		return dataService().apiCall('/api/product/integration/getproductcategories', data, 'POST', headers);
	}
	

	return {
		getAllCategories: this.getAllCategories,
        
	}
}

function venueService() {
	var self = this;

	this.getVenueDetails = function (data) {

		var headers = {
			'ApiKey': _apiKey
		};

		return dataService().apiCall('/api/venue/integration/getvenuedetails', data, 'POST', headers);
	}

	this.getVenueById = function (data) {
		var headers = {};
		return dataService().apiCallWithAuth('/api/venue/getvenues', data, 'POST', headers);
	}


	return {
		getVenueDetails: this.getVenueDetails,
		getVenueById: this.getVenueById
	}
}

function authenticateService() {
	var self = this;
	this.login = function (email, password) {

		var data = {
			grant_type: 'password',
			scope: 'read',
			username: email,
			password: password
		};

		var headers = {
			"DeviceId": _deviceId,
			"DeviceOs": _deviceOs,
			"VenueId": _venueId,
			"RoleType": "5",
			"FirebaseToken": _firebasetoken
		}

		return dataService().apiCall('/api/token', data, 'POST', headers, 'nojson');
	}

	this.refreshToken = function (refreshToken) {

		lsHelper().generateDeviceId();

		var firebase = authenticateProfile().getFirebase();

		if (firebase) {
			_firebasetoken = firebase;
			//_deviceId = firebase;
		}

		var data = {
			grant_type: 'refresh_token',
			scope: 'read',
			refresh_token: refreshToken,
		};

		var headers = {
			"DeviceId": _deviceId,
			"DeviceOs": _deviceOs,
			"VenueId": _venueId,
			"RoleType": "5",
			"FirebaseToken": _firebasetoken
		}

		return dataService().apiCall('/api/token', data, 'POST', headers, 'nojson');
	}	

	return {
		login: this.login,
		refreshToken: this.refreshToken,
	}
}

function authenticateProfile() {
	var self = this;

	this.setToken = function(accessToken, refreshToken) {
		localStorage.setItem('refreshToken', refreshToken);
		localStorage.setItem('accessToken', accessToken);
		return self.login();
	}

	this.setFirebase = function (token) {
		localStorage.setItem('firebaseToken', token);
		return self.login();
	}

	this.login = function () {
		var data= '';
		var headers = {
			"Authorization": 'Bearer ' + self.getAccessToken()
		};

		var def = jQuery.Deferred();

		userService().getCurrentUser().done(function (responseData) {
			if (responseData.status === 200) {
				var user = {
					id: responseData.data.id,
					name: responseData.data.name,
					photo: _apiUrl + responseData.data.photo
				};
				localStorage.setItem('currentUser', JSON.stringify(user));
			}
			def.resolve(user);
		}).fail(function (responseData) {
			console.log(responseData);
			def.reject(responseData);
		});

		return def.promise();

	},

	this.getLoggedUser = function () {
		var user = localStorage.getItem('currentUser');
		if (user) {
			return JSON.parse(user);
		}
		else {
			return null;
		}
	}

	this.getAccessToken = function () {
		return localStorage.getItem('accessToken');
	}

	this.getRefreshToken = function () {
		return localStorage.getItem('refreshToken');
	},
	this.getFirebase = function () {
		return localStorage.getItem('firebaseToken');
	},
	this.logout = function () {
		localStorage.removeItem('refreshToken');
		localStorage.removeItem('accessToken');
		localStorage.removeItem('currentUser');
	}
	return {
		setToken: this.setToken,
		getLoggedUser: this.getLoggedUser,
		getAccessToken: this.getAccessToken,
		getRefreshToken: this.getRefreshToken,
		logout: this.logout,
		login: this.login,
		setFirebase: this.setFirebase,
		getFirebase: this.getFirebase
	}
}

function userService() {
	var self = this;

	this.getCurrentUser = function () {

		var data = '';
		var headers = {};
		return dataService().apiCallWithAuth('/api/user/getcurrentuser', data, 'GET', headers);
	}

	this.saveUser = function (data) {
		var headers = {};
		return dataService().apiCallWithAuth('/api/user/updatecustomeruser', data, 'PUT', headers);
	}

	this.changePassword = function (data) {
		var headers = {};
		return dataService().apiCallWithAuth('/api/user/updatecustomerpassword', data, 'PUT', headers);
	}

	this.saveUserAddress = function (data) {
		var headers = {};
		return dataService().apiCallWithAuth('/api/user/updatecustomeraddress', data, 'PUT', headers);
	}

	this.updateUserPhoto = function (data) {
		var headers = {};
		return dataService().apiCallFormDataWithAuth('/api/user/updateuserphoto', data, 'POST', headers);
	}

	this.getUserByEmail = function (data) {
		var headers = {};
		return dataService().apiCall('/api/user/forgotpassword', data, 'POST', headers);
	}

	this.getPin = function (data) {
		var headers = {};
		return dataService().apiCall('/api/user/forgotpasswordpin?data=' + data, {}, 'POST', headers);
	}

	this.updatePasswordWithPin = function(data) {
		var headers = {};
		return dataService().apiCall('/api/user/updatecustomerpasswordwithpin', data, 'PUT', headers);
	}

	this.generateSSOToken = function () {
		var data = '';
		var headers = {};
		return dataService().apiCallWithAuth('/api/user/generatessotoken', data, 'POST', headers);
	}

	return {
		getCurrentUser: this.getCurrentUser,
		saveUser: this.saveUser,
		updateUserPhoto: this.updateUserPhoto,
		changePassword: this.changePassword,
		saveUserAddress: this.saveUserAddress,
		getUserByEmail: this.getUserByEmail,
		getPin: this.getPin,
		updatePasswordWithPin: this.updatePasswordWithPin,
		generateSSOToken: this.generateSSOToken
	}
}

function orderService() {
	var self = this;

	this.getOrdersByPhone = function (data) {
		var headers = {};
		return dataService().apiCallWithAuth('/api/order/getorders', data, 'POST', headers);
	}

	this.getOrderFeedbackToken = function (data) {
		var headers = {};
		return dataService().apiCallWithAuth('/api/order/getorderfeedbacktoken', data, 'POST', headers);
	}

	this.getOrderTrackingToken = function (data) {
		var headers = {};
		return dataService().apiCallWithAuth('/api/order/getordertrackingtoken', data, 'POST', headers);
	}

	return {
		getOrdersByPhone: this.getOrdersByPhone,
		getOrderFeedbackToken: this.getOrderFeedbackToken,
		getOrderTrackingToken: this.getOrderTrackingToken
	}
}

function IDGenerator() {

	this.length = 8;
	this.timestamp = +new Date;

	var _getRandomInt = function (min, max) {
		return Math.floor(Math.random() * (max - min + 1)) + min;
	}

	this.generate = function () {
		var ts = this.timestamp.toString();
		var parts = ts.split("").reverse();
		var id = "";

		for (var i = 0; i < this.length; ++i) {
			var index = _getRandomInt(0, parts.length - 1);
			id += parts[index];
		}

		return id;
	}
}